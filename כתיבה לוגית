Objects:
O		# A simple Object.
OεS		# An object that is in S.

Quality:
Q			# A simple Quality

Sets:
S		  # A simple Set
{Q}		# The set of all objects that have the quality Q
{S|Q} # The set of all objects in S that have Q
SחS   # The set of all objects that are in both S and S
S:P 	# The set of object that are in S, and for which P is ‎True.



Propositions:
O;P 	# Claiming that for object O, P is true.
\A\ S:P	# Claiming that for any object in S, P is true.
\E\ O	# Claiming that an object O exists.
P /=> P # Claiming that if P than P.
P <=> P # Claiming that P if and only if P.



Moods:
LET {O} 	   # Introducing O. Existance is imperativly implied.
LET {P} 	   # Imperativly claiming P.
DEF {O|P}	   # Introducing O as the object for which P is True. Existance is imperativly implied.
{P} 		   	 # Claiming P, relying on what was already Known.
PRV {P}		   # expect everything until QED to be what P is relying on, i.e the proof for P.
ASM {P} name # Introducing P as assumption without claiming it. P get a name.
SUP {P}		   # Claiming P, relying on all preceding assumptions. If a preceding assumption is found False, P is automaticly discarded.
SUP {P} name # Claiming P, relying on a named assumption. If the assumption is found False, P is automaticly discarded.
CNT {P}		   # Concluding that P is a contradiction. expects next line to claim an assumption False.
FLS name	   # an assumption is False.
QED			     # End of proof. P in the PRV statement is claimed and every assumption inside the proof is discarded.
CRL {P}			 # After QED, claiming a proposition as vorollary from the proof, thus saving it from being discarded.
NTT {P}		   # Imperativly introducing an equivalent way to refer to object already introduced.

Order of Operations:
Mathematical operators before logical.
/=>,<=>, <=\, before :
: before ;
; before |
