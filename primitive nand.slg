def ():: \all o:: sym, Φ, Ψ:: formula; {(v:: sign: = Φ); o (Φ) Ψ ?= ο v Ψ}
prim nand
def yes: yes a = a
def not: not a ?= nand a a
def T: ?= nand a not a
def F: ?= not T
def neg: neg o a b ?= o not a not b
def morg: morg o ?= not neg o
prv {neg (not o) a b = morg o a b|
	neg (not o) a b ?= (not o) not a not b ?= not o not a not b
	morg o a b ?= not neg o a b ?= not o not a not b
}
def and: ?= not nand
def or: ?= neg nand
def nor: ?= morg nand
prv {nor = neg and = not or|
	neg and ?= neg (not nand) ?= morg nand
	not or ?= not neg nand ?= morg nand
}

asrt {\not \not ?= yes} /# Binary logic
