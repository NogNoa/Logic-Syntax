def pref: pref x y = x
def suff: suff x y = y
def T: = T x y
def not: {not x != x} \and {not not x = x}
def F: = not T
prv {F x y = F|
	F x y = not T x y = not T = F
}
prv {not F = T| not F = not not T = T}
def {nand:
	nand x x = not x
	nand x not x = T
}
asrt {not precede nand}
prv {nand not x x = T|
	(nand not x x)(x | not x) =
	nand not not x not x =
	nand x not x = 
	T
}
prv {
	{nand T T = F| nand T T = not T} \and
	{nand T F = T| nand T F = nand T not T = T}
	{nand F T = T| nand F T = nand F not F = T}
	{nand F F = T|}
}
def and: = not nand
col {and x x = x
	and x not x = F}

def neg: neg x y = not x not y
asrt {not precede neg}
prv {neg neg = yes|
	neg neg x y =
	neg not x not y =
	neg (not x) (not y) =
	x y =
	yes x y
}

def or: = nand neg
prv {or x x = x|
	or x x = 
	nand neg x x =
	nand not x not x =
	nand (not x) (not x) =
	not not x =
	x
}
prv {or x not x = T|
	or x not x =
	nand neg x not x =
	nand not x not not x =
	nand not x x =
	T
}

def morg: morg x = not x neg

prv {not morg x = x neg | not morg x = not not x neg}
prv {x, y: x y = yes; not morg = x neg y}
	not morg = not neg not
	not morg a b c = not not a neg b c = a not b not c
	not neg not a b c = not a not b c
	
	

prv {morg x neg = not x | morg x neg = not x neg neg}
prv {morg neg = not| morg neg = not neg neg = not}

def nor: = morg nand
prv {nor = not or| not or = not nand neg = morg nand}
prv {nor = and neg| and neg = not nand neg}


 