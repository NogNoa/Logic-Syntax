def ():: \all o:: sym, Φ, Ψ:: formula; {(v:: sym: = Φ); o (Φ) Ψ ?= ο v Ψ}
def {operator:: type: 
		{\all o:: operator;
			{\exist l:: (list sym):
				{\exist Φ:: formula:
					{o \nin Φ \and o l ?= Φ}
}}}}
asrt {\all i:: nat; 
		{\all o:: operator[i];
			{\all l:: (list sym):
				{\exist Φ:: formula:
					{o \nin Φ \and o l ?= Φ}
				} \iff len(l) = i}
}}
def {precede:: relation[operator]: 
	{\all i,j:: nat; 
		{\all o:: operator[i], u:: operator: o precede u; 
			{\all l:: (list sym);
				{\all k:: nat: o = l[k];
					{u l = u l[..k] (o l[k+1..k+i+1]) l[k+i+1..]}}}}}}

prim nand
def yes: yes a = a
def not: not a ?= nand a a
def T: ?= nand a not a
def F: ?= not T
def neg: neg o a b ?= o not a not b
def morg: morg ?= not neg

asrt {neg not a b c ?= neg (not a) b c
	  neg a not b c ?= neg a (not b) c
	  neg a b not c ?= neg a b (not c)
}

prv {neg not = morg|
	neg not o a b ?= neg (not o) a b ?= (not o) not a not b ?= not o not a not b
	morg o a b ?= not neg o a b ?= not o not a not b
}

prv {\all o; o yes = o|
	o yes a ?= o a
}

asrt {not not ?= yes} /# Binary logic

prv {not morg ?= neg|
	not morg ?= not not neg ?= neg
}
prv {neg neg ?= yes|
	neg neg o a b ?= neg o not a not b ?= o not (not a) not (not b) ?= o a b
}
prv {neg morg ?= not|
	neg morg ?= neg not neg ?= neg neg not ?= yes not ?= not
}
prv {morg not ?= neg|
	morg not ?= not neg not = neg not not = neg yes ?= neg
}
prv {morg neg ?= yes|
	morg neg ?= not neg neg ?= not yes ?= not
}
prv {morg morg ?= yes|
	morg morg ?= not neg not neg ?= not not neg neg ?= yes yes ?= yes
}

def and: ?= not nand
def or: ?= neg nand
def nor: ?= morg nand

def then: then a b ?= nand a nand a b
def if: ?= neg then

def nif:= not if
def nthen := not then


def xor: nand if a b then a b
def iff: not xor

neg xor a b ?= xor (not a) (not b) = nand if not a not b then not a not b ?= nand neg if a b neg then a b ?= nand then a b if a b

def pre: pre a b = a
def suf: suf a b = b

def npre: not pre
def nsuf: not suf