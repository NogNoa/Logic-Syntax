def pref: pref x y = x
def suff: suff x y = y
def T: = T x y
def not: {not x != x} \and {not not x = x}
def F: = not T
prv {F x y = F|
	F x y = not T x y = not T = F
}
prv {not F = T| not F = not not T = T}
def {nand:
	nand x x = not x
	nand x not x = T
}
prv {nand not x x = T|
	(nand not x x)(x | not x) =
	nand not not x not x =
	nand x not x = 
	T
}
prv {
	{nand T T = F| nand T T = not T} \and
	{nand T F = T| nand T F = nand T not T = T}
	{nand F T = T| nand F T = nand F not F = T}
	{nand F F = T|}
}
def and: = not nand
col {and x x = x
	and x not x = F}

def neg: neg x y = not x not y
def or: = nand neg
prv {or x x = x|
	or x x = 
	nand neg x x =
	nand not x not x =
	nand (not x) (not x) =
	not not x =
	x
}
prv {or x not x = T|
	or x not x =
	nand neg x not x =
	nand not x not not x =
	nand not x x =
	T
}

def morg: morg x = not x neg

def nor: = morg nand
prv {nor = not or| not or = not nand neg = morg nand}
prv {nor = and neg| and neg = not nand neg}


 